# Generated by Django 5.0.3 on 2024-03-08 20:18

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Anuncio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('plataforma', models.CharField(max_length=50, verbose_name='Plataforma')),
                ('taxa_plataforma', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(limit_value=0, message='A taxa da plataforma não pode possuir um valor negativo.')], verbose_name='Taxa da Plataforma')),
            ],
            options={
                'verbose_name': 'Anúncio',
                'verbose_name_plural': 'Anúncios',
            },
        ),
        migrations.CreateModel(
            name='Imovel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('codigo', models.CharField(max_length=255, unique=True, verbose_name='Código')),
                ('capacidade', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(limit_value=1, message='O imóvel deve comportar ao menos um hóspede.')], verbose_name='Capacidade de Hospedagem')),
                ('banheiros', models.PositiveSmallIntegerField(verbose_name='Banheiros')),
                ('aceita_animais', models.BooleanField(blank=True, default=False, verbose_name='Aceita Animais')),
                ('taxa_limpeza', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(limit_value=0, message='A taxa de limpeza não pode possuir um valor negativo.')], verbose_name='Taxa de Limpeza')),
                ('data_ativacao', models.DateField(db_index=True, default=None, null=True, verbose_name='Data de Ativação')),
            ],
            options={
                'verbose_name': 'Imóvel',
                'verbose_name_plural': 'Imóveis',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, verbose_name='Data de Atualização')),
                ('codigo', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Código da reserva')),
                ('data_checkin', models.DateField(db_index=True, verbose_name='Check-in')),
                ('data_checkout', models.DateField(db_index=True, verbose_name='Check-out')),
                ('preco_total', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(limit_value=0.01, message='O preço total não pode possuir um valor negativo.')], verbose_name='Preço Total')),
                ('comentario', models.TextField(null=True, verbose_name='Comentário')),
                ('qtd_hospedes', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(limit_value=1, message='A reserva deve possuir ao menos um hóspede.')], verbose_name='Número de Hospedes')),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
            },
        ),
        migrations.AddConstraint(
            model_name='imovel',
            constraint=models.CheckConstraint(check=models.Q(('capacidade__gte', 1)), name='capacidade_min_val'),
        ),
        migrations.AddConstraint(
            model_name='imovel',
            constraint=models.CheckConstraint(check=models.Q(('banheiros__gte', 0)), name='banheiros_min_val'),
        ),
        migrations.AddConstraint(
            model_name='imovel',
            constraint=models.CheckConstraint(check=models.Q(('taxa_limpeza__gte', 0.0)), name='taxa_limpeza_min_val'),
        ),
        migrations.AddField(
            model_name='anuncio',
            name='imovel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anuncios', to='reservas.imovel', verbose_name='Imóvel'),
        ),
        migrations.AddField(
            model_name='reserva',
            name='anuncio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas', to='reservas.anuncio', verbose_name='Anúncio'),
        ),
        migrations.AddConstraint(
            model_name='reserva',
            constraint=models.CheckConstraint(check=models.Q(('data_checkin__lte', models.F('data_checkout'))), name='checkin_lte_checkout'),
        ),
        migrations.AddConstraint(
            model_name='reserva',
            constraint=models.CheckConstraint(check=models.Q(('qtd_hospedes__gte', 1)), name='qtd_hospedes_min_val'),
        ),
        migrations.AddConstraint(
            model_name='reserva',
            constraint=models.CheckConstraint(check=models.Q(('preco_total__gte', 0.01)), name='preco_total_min_val'),
        ),
    ]
